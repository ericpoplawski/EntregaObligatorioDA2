// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using smarthome.DataAccess;

#nullable disable

namespace smarthome.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241024194054_UpdatedMigration")]
    partial class UpdatedMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RUT")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Domain.Device", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainPicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("MotionDetectionEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PersonDetectionEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Photographies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsageType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RoomId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Domain.HardwareDevice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConnectionState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HomeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpeningState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PowerState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("HomeId");

                    b.HasIndex("RoomId");

                    b.ToTable("HardwareDevices");
                });

            modelBuilder.Entity("Domain.Home", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("QuantityOfResidents")
                        .HasColumnType("int");

                    b.Property<int>("QuantityOfResidentsAllowed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Homes");
                });

            modelBuilder.Entity("Domain.HomePermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HomePermissions");

                    b.HasData(
                        new
                        {
                            Id = "d48a4d1d-ef4c-4fa8-a2e8-be93e5979621",
                            Name = "DoesResidentCanReceiveNotifications"
                        },
                        new
                        {
                            Id = "56a5a463-c8b3-455d-a116-713ce73ff43d",
                            Name = "BindDeviceToHome"
                        },
                        new
                        {
                            Id = "6ec80570-71b7-4a62-b54e-e637d082d65f",
                            Name = "ListHomeDevices"
                        },
                        new
                        {
                            Id = "c34f262c-86fa-4e73-b484-0fd44e6b1327",
                            Name = "ChangeHardwareDeviceName"
                        });
                });

            modelBuilder.Entity("Domain.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HardwareDeviceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("HardwareDeviceId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Domain.Resident", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HomeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("HomeId");

                    b.HasIndex("UserId");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("Domain.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "f5747f2a-2b33-4778-8a5d-2f23be7b5243",
                            RoleName = "Administrator"
                        },
                        new
                        {
                            Id = "51210374-e12c-4b29-b417-d8227e826929",
                            RoleName = "CompanyOwner"
                        },
                        new
                        {
                            Id = "3e31642f-9719-4c02-9c59-0b1459eb52a2",
                            RoleName = "HomeOwner"
                        });
                });

            modelBuilder.Entity("Domain.Room", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HomeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HomeId");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("Domain.Session", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Domain.SystemPermission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SystemPermissions");

                    b.HasData(
                        new
                        {
                            Id = "b45ca2d3-4183-4d33-85fd-9c3552be7572",
                            Name = "CreateAdministrator"
                        },
                        new
                        {
                            Id = "220831f1-3b1b-4628-bf8e-bc272e865a5e",
                            Name = "DeleteAdministrator"
                        },
                        new
                        {
                            Id = "a1e6f910-325c-49aa-aafc-948ff8fdca1c",
                            Name = "ListUsers"
                        },
                        new
                        {
                            Id = "cf45ebc8-35f4-4fd4-ad15-aa9b9d99e718",
                            Name = "ListCompanies"
                        },
                        new
                        {
                            Id = "f6e40e09-f30a-4d46-afa7-21710f34805f",
                            Name = "CreateCompany"
                        },
                        new
                        {
                            Id = "52ab9e4c-ddad-4421-ae4a-04a58967b832",
                            Name = "CreateCompanyOwner"
                        },
                        new
                        {
                            Id = "775f1b1f-e515-4bfb-88db-d27e9f6f09d0",
                            Name = "RegisterSecurityCamera"
                        },
                        new
                        {
                            Id = "73065a03-9f94-43d8-9193-93497fece87a",
                            Name = "RegisterWindowSensor"
                        },
                        new
                        {
                            Id = "f5fd16a4-1015-4f98-a281-666b3abcccb8",
                            Name = "ListDevices"
                        },
                        new
                        {
                            Id = "a6deaf64-abb6-40b9-b8de-b7815f733ded",
                            Name = "ListSupportedDevices"
                        },
                        new
                        {
                            Id = "db2be08c-6e84-4527-88e3-45e7b64b42b0",
                            Name = "CreateHome"
                        },
                        new
                        {
                            Id = "36212d5d-1bc7-4266-b5ff-34f684f16c8f",
                            Name = "AddResidentToHome"
                        },
                        new
                        {
                            Id = "bc942ea0-1a6f-4bf9-9427-9ab50bee6ad6",
                            Name = "BindDeviceToHome"
                        },
                        new
                        {
                            Id = "35d6faec-91f1-4720-9747-5a72502dbea9",
                            Name = "ListHomeResidents"
                        },
                        new
                        {
                            Id = "fcbb1fba-bcce-474e-b088-393f1b40e47c",
                            Name = "ListHomeDevices"
                        },
                        new
                        {
                            Id = "cb3abca3-8d95-4ce3-bf3a-b923c4b47b87",
                            Name = "ConfigureResidentsPermissions"
                        },
                        new
                        {
                            Id = "c51e2d8d-85aa-4c49-8b39-7e882975f871",
                            Name = "ListNotifications"
                        },
                        new
                        {
                            Id = "c12b0156-7d89-4139-bd59-6a9972c7fcb6",
                            Name = "ChangeHardwareDeviceName"
                        },
                        new
                        {
                            Id = "6e409d19-e48f-4add-8fad-dba65a2ba0cd",
                            Name = "AddHomeOwnerRoleToUser"
                        });
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "diego-user-id",
                            CreationDate = new DateTime(2024, 10, 24, 16, 40, 54, 190, DateTimeKind.Local).AddTicks(969),
                            Email = "diegoaguirre1891@gmail.com",
                            FirstName = "Diego",
                            FullName = "Diego Aguirre",
                            LastName = "Aguirre",
                            Password = "$Aabbbdsddccdd1"
                        });
                });

            modelBuilder.Entity("Domain.UserNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("HasBeenRead")
                        .HasColumnType("bit");

                    b.Property<string>("NotificationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("Domain.UserRole", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            RoleId = "f5747f2a-2b33-4778-8a5d-2f23be7b5243",
                            UserId = "diego-user-id"
                        });
                });

            modelBuilder.Entity("HomePermissionResident", b =>
                {
                    b.Property<string>("HomePermissionsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResidentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("HomePermissionsId", "ResidentId");

                    b.HasIndex("ResidentId");

                    b.ToTable("HomePermissionResident");
                });

            modelBuilder.Entity("smarthome.DataAccess.RoleSystemPermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SystemPermissionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleId", "SystemPermissionId");

                    b.HasIndex("SystemPermissionId");

                    b.ToTable("RoleSystemPermission");

                    b.HasData(
                        new
                        {
                            RoleId = "f5747f2a-2b33-4778-8a5d-2f23be7b5243",
                            SystemPermissionId = "b45ca2d3-4183-4d33-85fd-9c3552be7572"
                        },
                        new
                        {
                            RoleId = "f5747f2a-2b33-4778-8a5d-2f23be7b5243",
                            SystemPermissionId = "220831f1-3b1b-4628-bf8e-bc272e865a5e"
                        },
                        new
                        {
                            RoleId = "f5747f2a-2b33-4778-8a5d-2f23be7b5243",
                            SystemPermissionId = "a1e6f910-325c-49aa-aafc-948ff8fdca1c"
                        },
                        new
                        {
                            RoleId = "f5747f2a-2b33-4778-8a5d-2f23be7b5243",
                            SystemPermissionId = "cf45ebc8-35f4-4fd4-ad15-aa9b9d99e718"
                        },
                        new
                        {
                            RoleId = "f5747f2a-2b33-4778-8a5d-2f23be7b5243",
                            SystemPermissionId = "52ab9e4c-ddad-4421-ae4a-04a58967b832"
                        },
                        new
                        {
                            RoleId = "51210374-e12c-4b29-b417-d8227e826929",
                            SystemPermissionId = "f6e40e09-f30a-4d46-afa7-21710f34805f"
                        },
                        new
                        {
                            RoleId = "51210374-e12c-4b29-b417-d8227e826929",
                            SystemPermissionId = "775f1b1f-e515-4bfb-88db-d27e9f6f09d0"
                        },
                        new
                        {
                            RoleId = "51210374-e12c-4b29-b417-d8227e826929",
                            SystemPermissionId = "73065a03-9f94-43d8-9193-93497fece87a"
                        },
                        new
                        {
                            RoleId = "3e31642f-9719-4c02-9c59-0b1459eb52a2",
                            SystemPermissionId = "f5fd16a4-1015-4f98-a281-666b3abcccb8"
                        },
                        new
                        {
                            RoleId = "3e31642f-9719-4c02-9c59-0b1459eb52a2",
                            SystemPermissionId = "a6deaf64-abb6-40b9-b8de-b7815f733ded"
                        },
                        new
                        {
                            RoleId = "3e31642f-9719-4c02-9c59-0b1459eb52a2",
                            SystemPermissionId = "db2be08c-6e84-4527-88e3-45e7b64b42b0"
                        },
                        new
                        {
                            RoleId = "3e31642f-9719-4c02-9c59-0b1459eb52a2",
                            SystemPermissionId = "36212d5d-1bc7-4266-b5ff-34f684f16c8f"
                        },
                        new
                        {
                            RoleId = "3e31642f-9719-4c02-9c59-0b1459eb52a2",
                            SystemPermissionId = "bc942ea0-1a6f-4bf9-9427-9ab50bee6ad6"
                        },
                        new
                        {
                            RoleId = "3e31642f-9719-4c02-9c59-0b1459eb52a2",
                            SystemPermissionId = "35d6faec-91f1-4720-9747-5a72502dbea9"
                        },
                        new
                        {
                            RoleId = "3e31642f-9719-4c02-9c59-0b1459eb52a2",
                            SystemPermissionId = "fcbb1fba-bcce-474e-b088-393f1b40e47c"
                        },
                        new
                        {
                            RoleId = "3e31642f-9719-4c02-9c59-0b1459eb52a2",
                            SystemPermissionId = "cb3abca3-8d95-4ce3-bf3a-b923c4b47b87"
                        },
                        new
                        {
                            RoleId = "3e31642f-9719-4c02-9c59-0b1459eb52a2",
                            SystemPermissionId = "c51e2d8d-85aa-4c49-8b39-7e882975f871"
                        },
                        new
                        {
                            RoleId = "f5747f2a-2b33-4778-8a5d-2f23be7b5243",
                            SystemPermissionId = "6e409d19-e48f-4add-8fad-dba65a2ba0cd"
                        },
                        new
                        {
                            RoleId = "51210374-e12c-4b29-b417-d8227e826929",
                            SystemPermissionId = "6e409d19-e48f-4add-8fad-dba65a2ba0cd"
                        },
                        new
                        {
                            RoleId = "3e31642f-9719-4c02-9c59-0b1459eb52a2",
                            SystemPermissionId = "c12b0156-7d89-4139-bd59-6a9972c7fcb6"
                        });
                });

            modelBuilder.Entity("Domain.Company", b =>
                {
                    b.HasOne("Domain.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Device", b =>
                {
                    b.HasOne("Domain.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Room", null)
                        .WithMany("Devices")
                        .HasForeignKey("RoomId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.HardwareDevice", b =>
                {
                    b.HasOne("Domain.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Home", "Home")
                        .WithMany()
                        .HasForeignKey("HomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.Navigation("Device");

                    b.Navigation("Home");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Home", b =>
                {
                    b.HasOne("Domain.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("Domain.Address", "Address", b1 =>
                        {
                            b1.Property<string>("HomeId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("HouseNumber")
                                .HasColumnType("int");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("HomeId");

                            b1.ToTable("Homes");

                            b1.WithOwner()
                                .HasForeignKey("HomeId");
                        });

                    b.OwnsOne("Domain.Location", "Location", b1 =>
                        {
                            b1.Property<string>("HomeId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("HomeId");

                            b1.ToTable("Homes");

                            b1.WithOwner()
                                .HasForeignKey("HomeId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Notification", b =>
                {
                    b.HasOne("Domain.HardwareDevice", "HardwareDevice")
                        .WithMany()
                        .HasForeignKey("HardwareDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HardwareDevice");
                });

            modelBuilder.Entity("Domain.Resident", b =>
                {
                    b.HasOne("Domain.Home", "Home")
                        .WithMany()
                        .HasForeignKey("HomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", null)
                        .WithMany("Residents")
                        .HasForeignKey("UserId");

                    b.Navigation("Home");
                });

            modelBuilder.Entity("Domain.Room", b =>
                {
                    b.HasOne("Domain.Home", "Home")
                        .WithMany()
                        .HasForeignKey("HomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Home");
                });

            modelBuilder.Entity("Domain.Session", b =>
                {
                    b.HasOne("Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.UserNotification", b =>
                {
                    b.HasOne("Domain.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.UserRole", b =>
                {
                    b.HasOne("Domain.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomePermissionResident", b =>
                {
                    b.HasOne("Domain.HomePermission", null)
                        .WithMany()
                        .HasForeignKey("HomePermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Resident", null)
                        .WithMany()
                        .HasForeignKey("ResidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("smarthome.DataAccess.RoleSystemPermission", b =>
                {
                    b.HasOne("Domain.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.SystemPermission", "Permission")
                        .WithMany()
                        .HasForeignKey("SystemPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Room", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Navigation("Residents");
                });
#pragma warning restore 612, 618
        }
    }
}
